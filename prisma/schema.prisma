generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(cuid())
  userName     String         @unique
  email        String         @unique
  password     String
  isActive     Boolean        @default(true)
  lastLogin    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  communities  Community[]
  posts        Post[]
  comments     Comment[]
  votes        Vote[]

  @@map("users")
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("refresh_tokens")
}

model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  banner      String?
  logo        String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@map("communities")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String?
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  comments    Comment[]
  votes       Vote[]

  @@index([communityId])
  @@index([authorId])
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  @@index([postId])
  @@index([authorId])
  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@map("votes")
}

enum VoteType {
  UP
  DOWN
}
